name: Docker
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: "."
      keep_last:
        description: "Number of docker tags to keep on the container registry"
        required: false
        type: string
        default: "10"
      registry:
        description: "Registry host"
        required: false
        type: string
        default: "ghcr.io"
      prune:
        description: "If it should prune old entries (works for GitHub or DigitalOcean)"
        required: false
        type: boolean
        default: true
      exclude_prune:
        description: "Tags to exclude, on the prune"
        required: false
        type: string
        default: "DEVELOP|RELEASE|MASTER"
      filter_files:
        required: false
        type: string
        default: |
          - "**"
        description: |
          Run only if certain files changed. Syntax is a yaml list:
          ```
          - common/**
          - config/**
          ```
    secrets:
      ALL_SECRETS:
        required: true
      OTHER_ENVS:
        required: false
      PERSONAL_GITHUB_TOKEN:
        required: true
      username:
        description: "Registry username"
        required: true
      password:
        description: "Registry password"
        required: true
      DIGITALOCEAN_ACCESS_TOKEN:
        description: "Digital ocean access token for prune (if DO's container registry is used)"
        required: false
    outputs:
      docker_tag:
        description: "The docker tag that was pushed"
        value: ${{ jobs.build.outputs.docker_tag }}

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  cache_tag: buildcache

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      docker_tag: ${{ steps.tag_output.outputs.tag }}
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1

      - name: To deploy
        id: to_deploy
        uses: NearSeaTechnologies/workflows/should-deploy@1.5.0
        with:
          ALL_SECRETS: ${{ secrets.ALL_SECRETS }}
          OTHER_ENVS: ${{ secrets.OTHER_ENVS }}

      - uses: dorny/paths-filter@v2.10.2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            docker:
            ${{ inputs.filter_files }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        if: steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true'

      - name: Login to Github Packages
        uses: docker/login-action@v1
        if: steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true'
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}

      - id: repo_lower
        uses: ASzc/change-string-case-action@v1
        if: steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true'
        with:
          string: ${{ github.repository }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        if: steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true'
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ${{ inputs.path }}
          # Note: tags has to be all lower-case
          tags: |
            ${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:${{ github.sha }}
            ${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:latest
            ${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:${{ steps.to_deploy.outputs.env_name }}
          push: ${{ github.event_name != 'pull_request' && steps.to_deploy.outputs.should_deploy == 'true' }}
          cache-from: type=registry,ref=${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:${{ env.cache_tag }}
          cache-to: type=registry,ref=${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:${{ env.cache_tag }},mode=max

      - id: tag_output
        if: steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true'
        run: echo "::set-output name=tag::${{ inputs.registry }}/${{ steps.repo_lower.outputs.lowercase }}:${{ github.sha }}"

      - name: GHCR Prune
        uses: freefair/action-ghcr-prune@v0.4.1
        if: input.prune == true && inputs.registry == "ghcr.io" && (steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true')
        with:
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
          organization: ${{ github.repository_owner }}
          container: ${{ github.event.repository.name }}
          keep-last: ${{ inputs.keep_last }}
          tag-regex-exclude: \b(?:latest|${{ env.cache_tag }}|${{ inputs.exclude_prune }})\b
          untagged: true

      - name: Install doctl
        if: input.prune == true && startsWith(inputs.registry, "registry.digitalocean.com") && (steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true')
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Remove old images from Container Registry
        if: input.prune == true && startsWith(inputs.registry, "registry.digitalocean.com") && (steps.filter.outputs.docker == 'true' || steps.to_deploy.outputs.should_deploy == 'true')
        uses: ripplr-io/docr-image-remove@v1
        with:
          image_repository: ${{ steps.repo_lower.outputs.lowercase }}
          buffer_size: 10