name: Terraform validation
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: "terraform"
    secrets:
      terraform_cloud_tokens:
        required: false

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  validate-format:
    runs-on: ubuntu-latest
    name: Validate terraform configuration
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.terraform_cloud_tokens }}
      - name: Terraform Format
        id: fmt
        run: terraform -chdir=${{ inputs.path }} fmt -check
      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ inputs.path }} init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=${{ inputs.path }} validate -no-color

      - name: Update Pull Request
        uses: actions/github-script@v6.1.0
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1

      - name: Render terraform docs inside the terraformDocs.md
        uses: terraform-docs/gh-actions@v0.11.0
        with:
          working-dir: terraform
          output-file: ../terraformDocs.md
          output-method: inject
          git-push: ${{ github.event_name != 'pull_request' && github.ref_name == 'develop' }}

      - name: Comment docs on PR
        uses: NejcZdovc/comment-pr@v1
        if: github.event_name == 'pull_request'
        with:
          file: "../../terraformDocs.md"