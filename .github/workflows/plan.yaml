name: Terraform Plan/apply
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: "terraform"
    secrets:
      ALL_SECRETS:
        required: true
      terraform_cloud_tokens:
        required: false

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  plan:
    runs-on: ubuntu-latest
    name: Plan/apply terraform
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1

      - name: Get env name
        shell: bash
        run: echo "##[set-output name=env_name;]$(echo ${GITHUB_BASE_REF:-$GITHUB_REF_NAME} | grep -o '^[^/]*' | tr a-z A-Z)"
        id: extract_env_name

      - name: Create .env and .env.output.envs
        uses: shine1594/secrets-to-env-action@v1.5.2
        with:
          secrets: ${{ secrets.ALL_SECRETS }}
          secrets_env: all
          # Get all secrets as .env
          prefix_prod: _${{ steps.extract_env_name.outputs.env_name }}_
          file_name_prod: terraform/.env

      - name: Load .env
        shell: bash
        run: |
          # Inject all secrets as envs (for this env)
          (cat terraform/.env) >> $GITHUB_ENV

      - name: To deploy
        shell: bash
        run: |
          echo "##[set-output name=has_envs;]$([ -s terraform/.env ] && echo true)"
        id: to_deploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.terraform_cloud_tokens }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ inputs.path }} init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && steps.to_deploy.outputs.has_envs == 'true'
        run: terraform -chdir=${{ inputs.path }} plan -no-color -input=false
        continue-on-error: true

      - name: Comment docs on PR
        uses: NejcZdovc/comment-pr@v1
        if: github.event_name == 'pull_request' && steps.to_deploy.outputs.has_envs == 'true'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          message: |
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -chdir=${{ inputs.path }} -auto-approve -input=false