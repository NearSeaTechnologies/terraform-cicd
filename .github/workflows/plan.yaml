name: Terraform Plan/apply
on:
  workflow_call:
    inputs:
      path:
        required: false
        type: string
        default: "terraform"
    secrets:
      ALL_SECRETS:
        required: true
      terraform_cloud_tokens:
        required: false

env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  plan:
    runs-on: ubuntu-latest
    name: Plan/apply terraform
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1

      - name: To deploy
        id: to_deploy
        uses: ./.github/workflows/should-deploy

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.terraform_cloud_tokens }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=${{ inputs.path }} init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' && steps.to_deploy.outputs.should_deploy == 'true'
        run: terraform -chdir=${{ inputs.path }} plan -no-color -input=false
        continue-on-error: true

      - name: Comment docs on PR
        uses: NejcZdovc/comment-pr@v1
        if: github.event_name == 'pull_request' && steps.to_deploy.outputs.should_deploy == 'true'
        with:
          identifier: plan
          message: |
            #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Plan üìñ`${{ steps.plan.outcome }}`

            <details><summary>Show Plan</summary>

            ```
            terraform

            ${{ steps.plan.outputs.stdout }}
            ```

            </details>

            *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Working Directory: `${{ env.tf_actions_working_dir }}`, Workflow: `${{ github.workflow }}`*

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name != 'pull_request' && steps.to_deploy.outputs.should_deploy == 'true'
        run: terraform -chdir=${{ inputs.path }} apply -auto-approve -input=false