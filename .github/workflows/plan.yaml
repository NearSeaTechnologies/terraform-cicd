name: Terraform Plan/apply
on:
  workflow_call:
    inputs:
      terraform_cloud_tokens:
        required: true
        type: string
    secrets:
      ALL_SECRETS:
        required: true
      REPO_ACCESS_TOKEN:
        required: true
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

jobs:
  plan:
    runs-on: ubuntu-latest
    name: Plan/apply terraform
    steps:
      - name: Git checkout
        uses: nschloe/action-cached-lfs-checkout@v1

      - name: Get env name
        shell: bash
        run: echo "##[set-output name=env_name;]$(echo ${GITHUB_BASE_REF:-$GITHUB_REF_NAME} | grep -o '^[^/]*' | tr a-z A-Z)"
        id: extract_env_name

      - name: Create .env and .env.output.envs
        uses: shine1594/secrets-to-env-action@v1.5.2
        with:
          secrets: ${{ secrets.ALL_SECRETS }}
          secrets_env: all
          # Get all secrets as .env
          prefix_prod: _${{ steps.extract_env_name.outputs.env_name }}_
          file_name_prod: terraform/.env

      - name: Load .env
        shell: bash
        run: |
          # Inject all secrets as envs (for this env)
          (cat terraform/.env) >> $GITHUB_ENV

      - name: To deploy
        shell: bash
        run: |
          echo "##[set-output name=has_envs;]$([ -s terraform/.env ] && echo true)"
        id: to_deploy

      - name: terraform plan
        uses: dflook/terraform-plan@v1.25.0
        if: github.event_name == 'pull_request' && steps.to_deploy.outputs.has_envs == 'true'
        env:
          TERRAFORM_CLOUD_TOKENS: ${{ github.event.inputs.terraform_cloud_tokens }}
        with:
          path: terraform

      - name: terraform apply
        uses: dflook/terraform-apply@v1.25.0
        if: github.event_name != 'pull_request' && steps.to_deploy.outputs.has_envs == 'true'
        env:
          TERRAFORM_CLOUD_TOKENS: ${{ github.event.inputs.terraform_cloud_tokens }}
        with:
          path: terraform