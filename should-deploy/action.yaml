name: 'Deploy envs'
description: |
  Checks if there should be a deploy for this branch, by checking if there are env vars with the corresponding prefix.
    Ex.: Branch test/first has a prefix of "__TEST__*".
  That's stored on the output should_deploy.
  It also injects the secrets into the GITHUB_ENV, if the input is true
inputs:
  inject_secrets:
    description: 'If the environment variables on ALL_SECRETS should be injected (filtered and without the prefix)'
    required: false
    default: 'false'
  inject_other_envs:
    description: 'If the environment variables on OTHER_ENVS should be injected'
    required: false
    default: 'false'
  ALL_SECRETS:
    description: 'All the secrets to filter'
    required: true
  OTHER_ENVS:
    required: false
    description: 'Other env vars to inject'
    default: '{}'
outputs:
  should_deploy:
    description: "If there should be a deploy for this branch"
    value: ${{ steps.to_deploy.outputs.has_envs }}
  env_name:
    description: "The extracted env name (uppercase)"
    value: ${{ steps.extract_env_name.outputs.env_name }}

runs:
  using: "composite"
  steps:
    - name: Get env name
      shell: bash
      run: echo "##[set-output name=env_name;]$(echo ${GITHUB_BASE_REF:-$GITHUB_REF_NAME} | grep -o '^[^/]*' | tr a-z A-Z)"
      id: extract_env_name

    - name: Create .env and .env.output.envs
      uses: shine1594/secrets-to-env-action@v1.5.2
      with:
        secrets: ${{ inputs.ALL_SECRETS }}
        secrets_env: production
        # Get all secrets as .env
        prefix_prod: _${{ steps.extract_env_name.outputs.env_name }}_
        file_name_prod: .temp.env

    - name: Load .env
      shell: bash
      if: inputs.inject_secrets == 'true'
      run: |
        # Inject all secrets as envs (for this env)
        (cat .temp.env) >> $GITHUB_ENV

    - uses: Firenza/secrets-to-env@v1.1.0
      if: inputs.inject_other_envs == 'true'
      with:
          secrets: ${{ inputs.OTHER_ENVS }}

    - name: To deploy
      shell: bash
      run: |
        echo "##[set-output name=has_envs;]$([ -s .temp.env ] && echo true)"
      id: to_deploy
